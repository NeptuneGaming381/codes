# include <iostream>
# include <bits/stdc++.h>
# include <cmath>
using namespace std;
vector<long long> adj[200001];
//bool vis[200001];
/*void dfs (long long s)
{
	vis[s]=true;
	for (long long next : adj[s])
	{
		if (!vis[next])
		{
			dfs(next);
		}
	}
}*/
/*long long bfs(long long s) 
{
    queue<long long> q;
    vector<bool> vis(n);
    long long c = 0;
    vis[s] = true;
    q.push(s);
    while (!q.empty())
	{
        long long currnode = q.front();
        q.pop();
        for (auto next : adj[currnode]) 
		{
            if (!vis[next]) 
			{
                vis[next] = true;
                q.push(next);
            }
        }              
        c++;
    }
    return c;
}*/
long long maxy(long long a, long long b, long long c)
{
	long long arr[3]={a,b,c};
	long long ret_val=*max_element(arr,arr+3);
	return ret_val;
}
int main()
{
	freopen("hps.in","r",stdin); 
	freopen("hps.out","w",stdout);
	long long n;
	long long k;
	cin >> n >> k;
	long long dp[n+1][k+1][3];
	for (long long i=0;i<=n;i++)
	{
		for (long long j=0;j<=k;j++)
		{
			for (long long k=0;k<=2;k++)
			{
				dp[i][j][k]=0;
			}
		}
	}
	char arr[n+1];
	arr[0]='0';
	long long finans=-1e9;
	for (long long i=1;i<=n;i++)
	{
		cin >> arr[i];
		if (arr[i]=='H')
		{
			dp[i][0][0]=dp[i-1][0][0];
			dp[i][0][1]=dp[i-1][0][1]+1;
			dp[i][0][2]=dp[i-1][0][2];
		}
		else if (arr[i]=='P')
		{
			dp[i][0][0]=dp[i-1][0][0];
			dp[i][0][1]=dp[i-1][0][1];
			dp[i][0][2]=dp[i-1][0][2]+1;
		}
		else
		{
			dp[i][0][0]=dp[i-1][0][0]+1;
			dp[i][0][1]=dp[i-1][0][1];
			dp[i][0][2]=dp[i-1][0][2];
		}
		finans=maxy(dp[i][0][0],dp[i][0][1],dp[i][0][2]);
	}
	// n is the nth card being played
	// k is the number of changes made till now
	// 0 signifies hoof, 1 signifies paper, 2 signifies scissor as the card which is being played as nth card 
	// if 0 changes made with i cards then it will just be the max occuring element till then  
	for (long long i=1;i<=n;i++)
	{
		for (long long j=1;j<=k;j++)
		{
			dp[i][j][0]=maxy(dp[i-1][j][0],dp[i-1][j-1][1],dp[i-1][j-1][2]);
			if (arr[i]=='S')
			{
				dp[i][j][0]=dp[i][j][0]+1;
			}
			dp[i][j][1]=maxy(dp[i-1][j-1][0],dp[i-1][j][1],dp[i-1][j-1][2]);
			if (arr[i]=='H')
			{
				dp[i][j][1]=dp[i][j][1]+1;
			}
			dp[i][j][2]=maxy(dp[i-1][j-1][0],dp[i-1][j-1][1],dp[i-1][j][2]);
			if (arr[i]=='P')
			{
				dp[i][j][2]=dp[i][j][2]+1;
			}
			//cout << dp[i][j][0] << " " << dp[i][j][1] << " " << dp[i][j][2] << endl;
			long long temp=maxy(dp[i][j][0],dp[i][j][1],dp[i][j][2]);
			finans=max(finans,temp);
		}
	}	
	cout << finans << endl; 
	// OneDrive\Desktop\rand
	
}												
