# include <iostream>
# include <bits/stdc++.h>
# include <cmath>
using namespace std;
vector<long long> adj[200001];
//bool vis[200001];
/*void dfs (long long s)
{
	vis[s]=true;
	for (long long next : adj[s])
	{
		if (!vis[next])
		{
			dfs(next);
		}
	}
}*/
/*long long bfs(long long s) 
{
    queue<long long> q;
    vector<bool> vis(n);
    long long c = 0;
    vis[s] = true;
    q.push(s);
    while (!q.empty())
	{
        long long currnode = q.front();
        q.pop();
        for (auto next : adj[currnode]) 
		{
            if (!vis[next]) 
			{
                vis[next] = true;
                q.push(next);
            }
        }              
        c++;
    }
    return c;
}*/
long long n;
long long xstart;
long long ystart;
long long xend;
long long yend;
vector<pair<long long , long long > > mirrors;
long long bfs(long long x, long long y) 
{
    queue<pair<long long, long long> > q;
	queue<pair<long long, long long> > p;
	queue<long long> steps;
	long long prevx=0;
	long long prevy=0;
	q.push({x,y});
	p.push({x,y});
	steps.push(0);
    bool vis[100002]={false};
	long long currind=0;
	vis[0]=true;
    while (!q.empty())
	{
        pair<long long, long long> currpair=q.front();
		pair<long long, long long> prevpair=p.front();
		long long currtot=steps.front();
		steps.pop();
		p.pop();
		q.pop();
		x=currpair.first;
		y=currpair.second;
		prevx=prevpair.first;
		prevy=prevpair.second;
        for (long long i=1;i<=n+1;i++) 
		{
			if (!vis[i])
			{
				long long currx=mirrors[i].first;
				long long curry=mirrors[i].second;
				bool works=false;
				if (prevy==y && currx==x)
				{
					works=true;
				}
				else if (prevx==x && curry==y)
				{
					works=true;
				}
				if (works==true)
				{
					//cout << currx << " " << curry << endl;
					if (currx==xend && curry==yend)
					{
						return currtot;
					}
					q.push({currx,curry});
					steps.push(currtot+1);
					p.push({x,y});
					vis[i]=true;
				}
			}
        }
		//cout << "path broken" << endl;
    }	
}
int main()
{
	//freopen("lasers.in","r",stdin); 
	//freopen("lasers.out","w",stdout);
	cin >> n >> xstart >> ystart >> xend >> yend;
	long long x1;
	long long y1;
	mirrors.push_back({xstart,ystart});
	for (long long i=1;i<=n;i++)
	{
		cin >> x1 >> y1;
		mirrors.push_back({x1,y1});
	}
	mirrors.push_back({xend,yend});
	/*for (long long i=0;i<=n+1;i++)
	{
		cout << mirrors[i].first << " " << mirrors[i].second << endl;
	}*/
	//cout << bfs(xstart,ystart) << endl;
	cout << bfs(xstart,ystart) << endl;
	
}												
