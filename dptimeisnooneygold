# include <iostream>
# include <bits/stdc++.h>
# include <cmath>
using namespace std;
vector<long long> adj[200001];
//bool vis[200001];
/*void dfs (long long s)
{
	vis[s]=true;
	for (long long next : adj[s])
	{
		if (!vis[next])
		{
			dfs(next);
		}
	}
}*/
/*long long bfs(long long s) 
{
    queue<long long> q;
    vector<bool> vis(n);
    long long c = 0;
    vis[s] = true;
    q.push(s);
    while (!q.empty())
	{
        long long currnode = q.front();
        q.pop();
        for (auto next : adj[currnode]) 
		{
            if (!vis[next]) 
			{
                vis[next] = true;
                q.push(next);
            }
        }              
        c++;
    }
    return c;
}*/
long long maxy(long long a, long long b, long long c)
{
	long long arr[3]={a,b,c};
	long long ret_val=*max_element(arr,arr+3);
	return ret_val;
}
int main()
{
	freopen("time.in","r",stdin); 
	freopen("time.out","w",stdout);
	long long n;
	long long m;
	long long c;
	cin >> n >> m >> c;
	long long dp[n+1][1001];
	for (long long i=0;i<=n;i++)
	{
		for (long long j=0;j<=1000;j++)
		{
			dp[i][j]=0;
		}
	}
	// the money earned if cow on ith city after t days
	long long arr[n+1];
	arr[0]=0;
	for (long long i=1;i<=n;i++)
	{
		cin >> arr[i];
	}
	for (long long i=1;i<=m;i++)
	{
		long long x;
		long long y;
		cin >> x >> y;
		adj[y].push_back(x);
	}
	// on day 0, without any moves the answer will be first element of array 
	for (long long i=0;i<=n;i++)
	{
		dp[i][0]=-1e10;
	}
	dp[1][0]=arr[1];
	for (long long t=1;t<=1000;t++)
	{
		for (long long i=1;i<=n;i++)
		{
			// ith city, with t days on road
			// can reach the ith city from all those that are connected to it, in 1 more day than that one
			long long curr_max=-1e9;
			for (long long k=0;k<adj[i].size();k++)
			{
				long long curr_ele=adj[i][k];
				//cout << i << " " << curr_ele << " ";
				curr_max=max(curr_max,dp[curr_ele][t-1]+arr[i]);
			}
			//cout << endl;
			dp[i][t]=curr_max;
			//cout << i << " " << t << " " << dp[i][t] << endl;		
		}
		//cout << endl;
	}
	long long finans=-1e9;
	for (long long i=1;i<=1000;i++)
	{
		long long rem=c*i*i;
		finans=max(finans,dp[1][i]-rem);
		//cout << i << " " << dp[1][i] << endl;
	}
	cout << finans << endl;
	// OneDrive\Desktop\rand
	
}												
