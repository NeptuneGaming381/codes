# include <iostream>
# include <bits/stdc++.h>
# include <cmath>
int main()
{
	freopen("socdist.in", "r", stdin);
	freopen("socdist.out","w",stdout); 
	long long cows;
	long long intervals;
	cin >> cows >> intervals;
	vector<pair<long long, long long> > loc;
	long long x;
	long long y;
	for (long long i=0;i<=intervals-1;i++)
	{
		cin >> x >> y;
		loc.push_back({x,y});
	}
	sort(loc.begin(),loc.end());
	// using binary search, keep cows at certain interval
	long long l=1;
	vector<pair< long long, long long> >::iterator tp;
	tp=loc.end()-1;
	long long r=tp->second;
	long long ans=0;
	while (l<=r)
	{
		long long mid = l+((r-l)/2);
		// check how many come in the current interval
		long long cowtake=0;
		vector<pair< long long, long long> >::iterator it;
		it=loc.begin();
		long long prev=it->first-mid;
		for (it=loc.begin();it<loc.end();it++)
		{
			long long ftakehere=std::max(it->first,prev+mid);
			long long ltakehere=it->second;
			// ftakehere+ (mid*n)<=ltakehere
			long long curr=ftakehere;
			while (ftakehere<=ltakehere)
			{
				cowtake++;
				ftakehere=ftakehere+mid;
			}
			prev=ftakehere-mid;
			//cout << mid << " " << ftakehere << " " << ltakehere << " " << a << endl;
			// keep adding cows with mid distance to ftakehere till it is less than ltake here
		}
		if (cowtake>=cows)
		{
			l=mid+1;
			ans=mid;
		}
		else
		{
			r=mid-1;
		}
	}
	cout << ans << endl;
	// OneDrive\Desktop\rand
}
